<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>[Hadoop源码解读]（一）MapReduce篇之InputFormat - 苏格拉底的毒堇汁
        - 博客频道 - CSDN.NET</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="平时我们写MapReduce程序的时候，在设置输入格式的时候，总会调用形如job.setInputFormatClass(KeyValueTextInputFormat.class);来保证输入文件按照我们想要的格式被读取。所有的输入格式都继承于InputFormat，这是一个抽象类，其子类有专门用于读取普通文件的FileInputFormat，用来读取数据库的DBInputFormat等等。" />
    <script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
        <!--new top-->
               <link rel="stylesheet" href="http://static.csdn.net/public/common/toolbar/css/index.css">        <!--new top-->

    <link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/dark1/css/style.css?v=1.1" />
    <link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/posa88/rss/list" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/blue_green.css" />
 

</head>
<body>
    
   
      <!--new top-->
    <script id="toolbar-tpl-scriptId" fixed="true" prod="blog" skin="black" src="http://static.csdn.net/public/common/toolbar/js/html.js" type="text/javascript"></script>
     <!--new top-->
    <div id="container">
        <div id="header">
    <div class="header">
        <div id="blog_title">
            <h2>
                <a href="http://blog.csdn.net/posa88">苏格拉底的毒堇汁</a></h2>
            <h3>我非常清楚地知道，我并没有智慧，不论大的还是小的都没有。</h3>
            <div class="clear">
            </div>
        </div>
        <div class="clear">
        </div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg">
    </div>
    <div class="navigator">
        <ul>
                <li id="btnContents"><a href="http://blog.csdn.net/posa88?viewmode=contents"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_mulu'])">
                    <img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
                <li id="btnView"><a href="http://blog.csdn.net/posa88?viewmode=list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_zhaiyao'])">
                    <img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
                <li id="btnRss"><a href="http://blog.csdn.net/posa88/rss/list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_RSS'])">
                    <img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "posa88";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/posa88";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

        <div id="body">
            <div id="main">
                <div class="main">
<div class="notice tracking-ad" data-mod='popu_3' > 


<a href="http://bbs.csdn.net/topics/390708348" target="_blank"><font color=red>【大声说出你的爱】CSDN社区情人节特别活动
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;


<a href="http://www.csdn.net/article/2014-02-11/2818358"target="_blank">
<font color=red>专访李云：从通讯行业的架构师到互联网“新兵”</font></a>
&nbsp;&nbsp;&nbsp;&nbsp;


<a href="http://bbs.csdn.net/topics/390708540"target="_blank">
<font color=blue>电子版《程序员》杂志免费领</font></a>




</div>                    <link href="http://static.blog.csdn.net/css/comment1.css" type="text/css" rel="stylesheet" />
<link href="http://static.blog.csdn.net/css/style1.css" type="text/css" rel="stylesheet" />
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h1>
        <span class="link_title"><a href="/posa88/article/details/7897963">
        [Hadoop源码解读]（一）MapReduce篇之InputFormat
        </a></span>
    </h1>
</div>

    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/posa88/article/category/1220695">Hadoop源码解读</a> 
        </span>
    <span class="link_postdate">2012-08-23 17:20</span>
    <span class="link_view" title="阅读次数">4181人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])">评论</a>(8)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shoucang']);collectArticle('[Hadoop源码解读]（一）MapReduce篇之InputFormat','7897963');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_jubao']);report(7897963,2);return false;" title="举报">举报</a></span>
    
</div>

    
<div id="article_content" class="article_content">

<p></p>
<p><br>
&nbsp; 平时我们写MapReduce程序的时候，在设置输入&#26684;式的时候，总会调用形如job.setInputFormatClass(KeyValueTextInputFormat.class);来保证输入文件按照我们想要的&#26684;式被读取。所有的输入&#26684;式都继承于InputFormat，这是一个抽象类，其子类有专门用于读取普通文件的FileInputFormat，用来读取数据库的DBInputFormat等等。</p>
<p>&nbsp; 其实，一个输入&#26684;式InputFormat，主要无非就是要解决如何将数据分割成分片[比如多少行为一个分片]，以及如何读取分片中的数据[比如按行读取]。前者由getSplits()完成，后者由RecordReader完成。</p>
<p><img src="http://my.csdn.net/uploads/201208/23/1345714215_4111.png" alt=""><br>
</p>
<p>&nbsp; 不同的InputFormat都会按自己的实现来读取输入数据并产生输入分片，一个输入分片会被单独的map task作为数据源。下面我们先看看这些输入分片(inputSplit)是什么样的。<br>
</p>
<h3>InputSplit：</h3>
<p>&nbsp; 我们知道Mappers的输入是一个一个的输入分片，称InputSplit。InputSplit是一个抽象类，它在逻辑上包含了提供给处理这个InputSplit的Mapper的所有K-V对。</p>
<p></p>
<pre name="code" class="html">public abstract class InputSplit {
  public abstract long getLength() throws IOException, InterruptedException;

  public abstract 
    String[] getLocations() throws IOException, InterruptedException;
}</pre>&nbsp; getLength()用来获取InputSplit的大小，以支持对InputSplits进行排序，而getLocations()则用来获取存储分片的位置列表。<br>
&nbsp; 我们来看一个简单InputSplit子类：FileSplit。
<p></p>
<p></p>
<pre name="code" class="html">public class FileSplit extends InputSplit implements Writable {
  private Path file;
  private long start;
  private long length;
  private String[] hosts;

  FileSplit() {}

  public FileSplit(Path file, long start, long length, String[] hosts) {
    this.file = file;
    this.start = start;
    this.length = length;
    this.hosts = hosts;
  }
 //序列化、反序列化方法，获得hosts等等……
}</pre><br>
&nbsp; 从上面的源码我们可以看到，一个FileSplit是由文件路径，分片开始位置，分片大小和存储分片数据的hosts列表组成，由这些信息我们就可以从输入文件中切分出提供给单个Mapper的输入数据。这些属性会在Constructor设置，我们在后面会看到这会在InputFormat的getSplits()中构造这些分片。
<p></p>
<p>&nbsp; 我们再看CombineFileSplit：</p>
<p></p>
<pre name="code" class="html">public class CombineFileSplit extends InputSplit implements Writable {

  private Path[] paths;
  private long[] startoffset;
  private long[] lengths;
  private String[] locations;
  private long totLength;

  public CombineFileSplit() {}
  public CombineFileSplit(Path[] files, long[] start, 
                          long[] lengths, String[] locations) {
    initSplit(files, start, lengths, locations);
  }

  public CombineFileSplit(Path[] files, long[] lengths) {
    long[] startoffset = new long[files.length];
    for (int i = 0; i &lt; startoffset.length; i++) {
      startoffset[i] = 0;
    }
    String[] locations = new String[files.length];
    for (int i = 0; i &lt; locations.length; i++) {
      locations[i] = &quot;&quot;;
    }
    initSplit(files, startoffset, lengths, locations);
  }
  
  private void initSplit(Path[] files, long[] start, 
                         long[] lengths, String[] locations) {
    this.startoffset = start;
    this.lengths = lengths;
    this.paths = files;
    this.totLength = 0;
    this.locations = locations;
    for(long length : lengths) {
      totLength += length;
    }
  }
  //一些getter和setter方法，和序列化方法
}</pre><br>
&nbsp; 与FileSplit类&#20284;，CombineFileSplit同样包含文件路径，分片起始位置，分片大小和存储分片数据的host列表，由于CombineFileSplit是针对小文件的，它把很多小文件包在一个InputSplit内，这样一个Mapper就可以处理很多小文件。要知道我们上面的FileSplit是对应一个输入文件的，也就是说如果用FileSplit对应的FileInputFormat来作为输入&#26684;式，那么即使文件特别小，也是单独计算成一个输入分片来处理的。当我们的输入是由大量小文件组成的，就会导致有同样大量的InputSplit，从而需要同样大量的Mapper来处理，这将很慢，想想有一堆map
 task要运行！！这是不符合Hadoop的设计理念的，Hadoop是为处理大文件优化的。
<p></p>
<p>&nbsp; 最后介绍TagInputSplit，这个类就是封装了一个InputSplit，然后加了一些tags在里面满足我们需要这些tags数据的情况，我们从下面就可以一目了然。</p>
<p></p>
<pre name="code" class="html">class TaggedInputSplit extends InputSplit implements Configurable, Writable {

  private Class&lt;? extends InputSplit&gt; inputSplitClass;

  private InputSplit inputSplit;

  @SuppressWarnings(&quot;unchecked&quot;)
  private Class&lt;? extends InputFormat&gt; inputFormatClass;

  @SuppressWarnings(&quot;unchecked&quot;)
  private Class&lt;? extends Mapper&gt; mapperClass;

  private Configuration conf;
  //getters and setters，序列化方法，getLocations()、getLength()等
}</pre><br>
<p></p>
<p>&nbsp; 现在我们对InputSplit的概念有了一些了解，我们继续看它是怎么被使用和计算出来的。</p>
<h3>InputFormat：</h3>
<p>&nbsp; 通过使用InputFormat，MapReduce框架可以做到：</p>
<p>&nbsp; 1、验证作业的输入的正确性</p>
<p>&nbsp; 2、将输入文件切分成逻辑的InputSplits，一个InputSplit将被分配给一个单独的Mapper task</p>
<p>&nbsp; 3、提供RecordReader的实现，这个RecordReader会从InputSplit中正确读出一条一条的Ｋ－Ｖ对供Mapper使用。</p>
<p></p>
<pre name="code" class="html">public abstract class InputFormat&lt;K, V&gt; {

  public abstract 
    List&lt;InputSplit&gt; getSplits(JobContext context
                               ) throws IOException, InterruptedException;
  
  public abstract 
    RecordReader&lt;K,V&gt; createRecordReader(InputSplit split,
                                         TaskAttemptContext context
                                        ) throws IOException, 
                                                 InterruptedException;

}
</pre><br>
<p>&nbsp; 上面是InputFormat的源码，getSplits用来获取由输入文件计算出来的InputSplits，我们在后面会看到计算InputSplits的时候会考虑到输入文件是否可分割、文件存储时分块的大小和文件大小等因素；而createRecordReader()提供了前面第三点所说的RecordReader的实现，以将K-V对从InputSplit中正确读出来，比如LineRecordReader就以偏移&#20540;为key，一行的数据为value，这就使得所有其createRecordReader()返回了LineRecordReader的InputFormat都是以偏移&#20540;为key，一行数据为value的形式读取输入分片的。</p>
<p></p>
<h3>FileInputFormat:</h3>
<p>&nbsp; PathFilter被用来进行文件筛选，这样我们就可以控制哪些文件要作为输入，哪些不作为输入。PathFilter有一个accept(Path)方法，当接收的Path要被包含进来，就返回true，否则返回false。可以通过设置mapred.input.pathFilter.class来设置用户自定义的PathFilter。</p>
<p></p>
<pre name="code" class="html">public interface PathFilter {
  boolean accept(Path path);
}</pre>
<p></p>
<p>&nbsp; FileInputFormat是InputFormat的子类，它包含了一个MultiPathFilter，这个MultiPathFilter由一个过滤隐藏文件(名字前缀为'-'或'.')的PathFilter和一些可能存在的用户自定义的PathFilters组成，MultiPathFilter会在listStatus()方法中使用，而listStatus()方法又被getSplits()方法用来获取输入文件，也就是说实现了在获取输入分片前先进行文件过滤。</p>
<p>&nbsp;&nbsp;</p>
<pre name="code" class="html">  private static class MultiPathFilter implements PathFilter {
    private List&lt;PathFilter&gt; filters;

    public MultiPathFilter(List&lt;PathFilter&gt; filters) {
      this.filters = filters;
    }

    public boolean accept(Path path) {
      for (PathFilter filter : filters) {
        if (!filter.accept(path)) {
          return false;
        }
      }
      return true;
    }
  }</pre>
<p>&nbsp;&nbsp; 这些PathFilter会在listStatus()方法中用到，listStatus()是用来获取输入数据列表的。<br>
</p>
<p>&nbsp; 下面是FileInputFormat的getSplits()方法，它首先得到分片的最小&#20540;minSize和最大&#20540;maxSize，它们会被用来计算分片大小。可以通过设置mapred.min.split.size和mapred.max.split.size来设置。splits链表用来存储计算得到的输入分片，files则存储作为由listStatus()获取的输入文件列表。然后对于每个输入文件，判断是否可以分割，通过computeSplitSize计算出分片大小splitSize,计算方法是：Math.max(minSize,
 Math.min(maxSize, blockSize));也就是保证在minSize和maxSize之间，且如果minSize&lt;=blockSize&lt;=maxSize，则设为blockSize。然后我们根据这个splitSize计算出每个文件的inputSplits集合，然后加入分片列表splits中。注意到我们生成InputSplit的时候按上面说的使用文件路径，分片起始位置，分片大小和存放这个文件的hosts列表来创建。最后我们还设置了输入文件数量：mapreduce.input.num.files。</p>
<p></p>
<pre name="code" class="plain">  public List&lt;InputSplit&gt; getSplits(JobContext job
                                    ) throws IOException {
    long minSize = Math.max(getFormatMinSplitSize(), getMinSplitSize(job));
    long maxSize = getMaxSplitSize(job);

    // generate splits
    List&lt;InputSplit&gt; splits = new ArrayList&lt;InputSplit&gt;();
    List&lt;FileStatus&gt;files = listStatus(job);
    for (FileStatus file: files) {
      Path path = file.getPath();
      FileSystem fs = path.getFileSystem(job.getConfiguration());
      long length = file.getLen();
      BlockLocation[] blkLocations = fs.getFileBlockLocations(file, 0, length);
      if ((length != 0) &amp;&amp; isSplitable(job, path)) { 
        long blockSize = file.getBlockSize();
        long splitSize = computeSplitSize(blockSize, minSize, maxSize);

        long bytesRemaining = length;
        while (((double) bytesRemaining)/splitSize &gt; SPLIT_SLOP) {
          int blkIndex = getBlockIndex(blkLocations, length-bytesRemaining);
          splits.add(new FileSplit(path, length-bytesRemaining, splitSize, 
                                   blkLocations[blkIndex].getHosts()));
          bytesRemaining -= splitSize;
        }
        
        if (bytesRemaining != 0) {
          splits.add(new FileSplit(path, length-bytesRemaining, bytesRemaining, 
                     blkLocations[blkLocations.length-1].getHosts()));
        }
      } else if (length != 0) {
        splits.add(new FileSplit(path, 0, length, blkLocations[0].getHosts()));
      } else { 
        //Create empty hosts array for zero length files
        splits.add(new FileSplit(path, 0, length, new String[0]));
      }
    }
    
    // Save the number of input files in the job-conf
    job.getConfiguration().setLong(NUM_INPUT_FILES, files.size());

    LOG.debug(&quot;Total # of splits: &quot; + splits.size());
    return splits;
  }
  //……setters and getters
}</pre><br>
&nbsp; 就这样，利用FileInputFormat 的getSplits方法，我们就计算出了我们的作业的所有输入分片了。
<p></p>
<p>&nbsp;&nbsp;那这些计算出来的分片是怎么被map读取出来的呢？就是InputFormat中的另一个方法createRecordReader(),FileInputFormat并没有对这个方法做具体的要求，而是交给子类自行去实现它。<br>
RecordReader：<br>
&nbsp; RecordReader是用来从一个输入分片中读取一个一个的K -V 对的抽象类，我们可以将其看作是在InputSplit上的迭代器。我们从类图中可以看到它的一些方法，最主要的方法就是nextKeyvalue()方法，由它获取分片上的下一个K-V 对。<br>
</p>
<p>&nbsp; 我们再深入看看上面提到的RecordReader的一个子类：LineRecordReader。</p>
<p>&nbsp; LineRecordReader由一个FileSplit构造出来，start是这个FileSplit的起始位置，pos是当前读取分片的位置，end是分片结束位置，in是打开的一个读取这个分片的输入流，它是使用这个FileSplit对应的文件名来打开的。key和value则分别是每次读取的K-V对。然后我们还看到可以利用getProgress()来跟踪读取分片的进度，这个函数就是根据已经读取的K-V对占总K-V对的比例来显示进度的。</p>
<p></p>
<pre name="code" class="html">public class LineRecordReader extends RecordReader&lt;LongWritable, Text&gt; {
  private static final Log LOG = LogFactory.getLog(LineRecordReader.class);

  private CompressionCodecFactory compressionCodecs = null;
  private long start;
  private long pos;
  private long end;
  private LineReader in;
  private int maxLineLength;
  private LongWritable key = null;
  private Text value = null;

  //我们知道LineRecordReader是读取一个InputSplit的，它从InputSplit中不断以其定义的格式读取K-V对
  //initialize函数主要是计算分片的始末位置，以及打开想要的输入流以供读取K-V对，输入流另外处理分片经过压缩的情况
  public void initialize(InputSplit genericSplit,
                         TaskAttemptContext context) throws IOException {
    FileSplit split = (FileSplit) genericSplit;
    Configuration job = context.getConfiguration();
    this.maxLineLength = job.getInt(&quot;mapred.linerecordreader.maxlength&quot;,
                                    Integer.MAX_VALUE);
    start = split.getStart();
    end = start + split.getLength();
    final Path file = split.getPath();
    compressionCodecs = new CompressionCodecFactory(job);
    final CompressionCodec codec = compressionCodecs.getCodec(file);

    // open the file and seek to the start of the split
    FileSystem fs = file.getFileSystem(job);
    FSDataInputStream fileIn = fs.open(split.getPath());
    boolean skipFirstLine = false;
    if (codec != null) {
      in = new LineReader(codec.createInputStream(fileIn), job);
      end = Long.MAX_VALUE;
    } else {
      if (start != 0) {
        skipFirstLine = true;
        --start;
        fileIn.seek(start);
      }
      in = new LineReader(fileIn, job);
    }
    if (skipFirstLine) {  // skip first line and re-establish &quot;start&quot;.
      start += in.readLine(new Text(), 0,
                           (int)Math.min((long)Integer.MAX_VALUE, end - start));
    }
    this.pos = start;
  }
  
  public boolean nextKeyValue() throws IOException {
    if (key == null) {
      key = new LongWritable();
    }
    key.set(pos); //对于LineRecordReader来说，它以偏移值为key，以一行为value
    if (value == null) {
      value = new Text();
    }
    int newSize = 0;
    while (pos &lt; end) {
      newSize = in.readLine(value, maxLineLength,
                            Math.max((int)Math.min(Integer.MAX_VALUE, end-pos),
                                     maxLineLength));
      if (newSize == 0) {
        break;
      }
      pos += newSize;
      if (newSize &lt; maxLineLength) {
        break;
      }

      // line too long. try again
      LOG.info(&quot;Skipped line of size &quot; + newSize + &quot; at pos &quot; + 
               (pos - newSize));
    }
    if (newSize == 0) {
      key = null;
      value = null;
      return false;
    } else {
      return true;
    }
  }

  @Override
  public LongWritable getCurrentKey() {
    return key;
  }

  @Override
  public Text getCurrentValue() {
    return value;
  }

  /**
   * Get the progress within the split
   */
  public float getProgress() {
    if (start == end) {
      return 0.0f;
    } else {
      return Math.min(1.0f, (pos - start) / (float)(end - start));//读取进度由已读取InputSplit大小比总InputSplit大小
    }
  }
  
  public synchronized void close() throws IOException {
    if (in != null) {
      in.close(); 
    }
  }
}</pre>其它的一些RecordReader如SequenceFileRecordReader，CombineFileRecordReader.java等则对应不同的InputFormat。<br>
<p><br>
</p>
<p>&nbsp; 下面继续看看这些RecordReader是如何被MapReduce框架使用的。</p>
<p>&nbsp; 我们先看看Mapper.class是什么样的：</p>
<p></p>
<pre name="code" class="html">public class Mapper&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt; {

  public class Context 
    extends MapContext&lt;KEYIN,VALUEIN,KEYOUT,VALUEOUT&gt; {
    public Context(Configuration conf, TaskAttemptID taskid,
                   RecordReader&lt;KEYIN,VALUEIN&gt; reader,
                   RecordWriter&lt;KEYOUT,VALUEOUT&gt; writer,
                   OutputCommitter committer,
                   StatusReporter reporter,
                   InputSplit split) throws IOException, InterruptedException {
      super(conf, taskid, reader, writer, committer, reporter, split);
    }
  }
  
  /**
   * Called once at the beginning of the task.
   */
  protected void setup(Context context
                       ) throws IOException, InterruptedException {
    // NOTHING
  }

  /**
   * Called once for each key/value pair in the input split. Most applications
   * should override this, but the default is the identity function.
   */
  @SuppressWarnings(&quot;unchecked&quot;)
  protected void map(KEYIN key, VALUEIN value, 
                     Context context) throws IOException, InterruptedException {
    context.write((KEYOUT) key, (VALUEOUT) value);
  }

  /**
   * Called once at the end of the task.
   */
  protected void cleanup(Context context
                         ) throws IOException, InterruptedException {
    // NOTHING
  }
  
  /**
   * Expert users can override this method for more complete control over the
   * execution of the Mapper.
   * @param context
   * @throws IOException
   */
  public void run(Context context) throws IOException, InterruptedException {
    setup(context);
    while (context.nextKeyValue()) {
      map(context.getCurrentKey(), context.getCurrentValue(), context);
    }
    cleanup(context);
  }
</pre><br>
&nbsp; 我们写MapReduce程序的时候，我们写的mapper都要继承这个Mapper.class，通常我们会重写map()方法，map()每次接受一个K-V对，然后我们对这个K-V对进行处理，再分发出处理后的数据。我们也可能重写setup()以对这个map task进行一些预处理，比如创建一个List之类的；我们也可能重写cleanup()方法对做一些处理后的工作，当然我们也可能在cleanup()中写出K-V对。举个例子就是：InputSplit的数据是一些整数，然后我们要在mapper中算出它们的和。我们就可以在先设置个sum属性，然后map()函数处理一个K-V对就是将其加到sum上，最后在cleanup()函数中调用context.write(key,value);
<p></p>
<p>&nbsp; 最后我们看看Mapper.class中的run()方法，它相当于map task的驱动，我们可以看到run()方法首先调用setup()进行初始操作，然后对每个context.nextKeyValue()获取的K-V对，就调用map()函数进行处理，最后调用cleanup()做最后的处理。事实上，从text他.nextKeyValue()就是使用了相应的RecordReader来获取K-V对的。</p>
<p>&nbsp; 我们看看Mapper.class中的Context类，它继承与MapContext，使用了一个RecordReader进行构造。下面我们再看这个MapContext。</p>
<p></p>
<pre name="code" class="html">public class MapContext&lt;KEYIN,VALUEIN,KEYOUT,VALUEOUT&gt; 
  extends TaskInputOutputContext&lt;KEYIN,VALUEIN,KEYOUT,VALUEOUT&gt; {
  private RecordReader&lt;KEYIN,VALUEIN&gt; reader;
  private InputSplit split;

  public MapContext(Configuration conf, TaskAttemptID taskid,
                    RecordReader&lt;KEYIN,VALUEIN&gt; reader,
                    RecordWriter&lt;KEYOUT,VALUEOUT&gt; writer,
                    OutputCommitter committer,
                    StatusReporter reporter,
                    InputSplit split) {
    super(conf, taskid, writer, committer, reporter);
    this.reader = reader;
    this.split = split;
  }

  /**
   * Get the input split for this map.
   */
  public InputSplit getInputSplit() {
    return split;
  }

  @Override
  public KEYIN getCurrentKey() throws IOException, InterruptedException {
    return reader.getCurrentKey();
  }

  @Override
  public VALUEIN getCurrentValue() throws IOException, InterruptedException {
    return reader.getCurrentValue();
  }

  @Override
  public boolean nextKeyValue() throws IOException, InterruptedException {
    return reader.nextKeyValue();
  }

}
    </pre><br>
&nbsp; 我们可以看到MapContext直接是使用传入的RecordReader来进行K-V对的读取了。
<p></p>
<p><br>
</p>
<p>&nbsp; 到现在，我们已经知道输入文件是如何被读取、过滤、分片、读出K-V对，然后交给我们的Mapper类来处理的了。</p>
<p></p>
<p></p>
<p>&nbsp; 最后，我们来看看FileInputFormat的几个子类。</p>
<h4>TextInputFormat:</h4>
<p>&nbsp; TextInputFormat是FileInputFormat的子类，其createRecordReader()方法返回的就是LineRecordReader。</p>
<p></p>
<pre name="code" class="html">public class TextInputFormat extends FileInputFormat&lt;LongWritable, Text&gt; {

  @Override
  public RecordReader&lt;LongWritable, Text&gt; 
    createRecordReader(InputSplit split,
                       TaskAttemptContext context) {
    return new LineRecordReader();
  }

  @Override
  protected boolean isSplitable(JobContext context, Path file) {
    CompressionCodec codec = 
      new CompressionCodecFactory(context.getConfiguration()).getCodec(file);
    return codec == null;
  }
}</pre><br>
&nbsp; 我们还看到isSplitable()方法，当文件使用压缩的形式，这个文件就不可分割，否则就读取不到正确的数据了。这从某种程度上将影响分片的计算。有时我们希望一个文件只被一个Mapper处理的时候，我们就可以重写isSplitable()方法，告诉MapReduce框架，我哪些文件可以分割，哪些文件不能分割而只能作为一个分片。
<p>&nbsp;&nbsp;</p>
<h4>NLineInputFormat;</h4>
<div>&nbsp; NLineInputFormat也是FileInputFormat的子类，与名字一致，它是根据行数来划分InputSplits而不是像TextInputFormat那样依赖分片大小和行的长度的。也就是说，TextInputFormat当一行很长或分片比较小时，获取的分片可能只包含很少的K-V对，这样一个map task处理的K-V对就很少，这可能很不理想。因此我们可以使用NLineInputFormat来控制一个map task处理的K-V对，这是通过分割InputSplits时按行数分割的方法来实现的，这我们在代码中可以看出来。我们可以设置mapreduce.input.lineinputformat.linespermap来设置这个行数。</div>
<div><pre name="code" class="html">public class NLineInputFormat extends FileInputFormat&lt;LongWritable, Text&gt; { 
  public static final String LINES_PER_MAP = 
    &quot;mapreduce.input.lineinputformat.linespermap&quot;;

  public RecordReader&lt;LongWritable, Text&gt; createRecordReader(
      InputSplit genericSplit, TaskAttemptContext context) 
      throws IOException {
    context.setStatus(genericSplit.toString());
    return new LineRecordReader();
  }

  /** 
   * Logically splits the set of input files for the job, splits N lines
   * of the input as one split.
   * 
   * @see FileInputFormat#getSplits(JobContext)
   */
  public List&lt;InputSplit&gt; getSplits(JobContext job)
  throws IOException {
    List&lt;InputSplit&gt; splits = new ArrayList&lt;InputSplit&gt;();
    int numLinesPerSplit = getNumLinesPerSplit(job);
    for (FileStatus status : listStatus(job)) {
      splits.addAll(getSplitsForFile(status,
        job.getConfiguration(), numLinesPerSplit));
    }
    return splits;
  }
  
  public static List&lt;FileSplit&gt; getSplitsForFile(FileStatus status,
      Configuration conf, int numLinesPerSplit) throws IOException {
    List&lt;FileSplit&gt; splits = new ArrayList&lt;FileSplit&gt; ();
    Path fileName = status.getPath();
    if (status.isDir()) {
      throw new IOException(&quot;Not a file: &quot; + fileName);
    }
    FileSystem  fs = fileName.getFileSystem(conf);
    LineReader lr = null;
    try {
      FSDataInputStream in  = fs.open(fileName);
      lr = new LineReader(in, conf);
      Text line = new Text();
      int numLines = 0;
      long begin = 0;
      long length = 0;
      int num = -1;
      while ((num = lr.readLine(line)) &gt; 0) {
        numLines++;
        length += num;
        if (numLines == numLinesPerSplit) {
          // NLineInputFormat uses LineRecordReader, which always reads
          // (and consumes) at least one character out of its upper split
          // boundary. So to make sure that each mapper gets N lines, we
          // move back the upper split limits of each split 
          // by one character here.
          if (begin == 0) {
            splits.add(new FileSplit(fileName, begin, length - 1,
              new String[] {}));
          } else {
            splits.add(new FileSplit(fileName, begin - 1, length,
              new String[] {}));
          }
          begin += length;
          length = 0;
          numLines = 0;
        }
      }
      if (numLines != 0) {
        splits.add(new FileSplit(fileName, begin, length, new String[]{}));
      }
    } finally {
      if (lr != null) {
        lr.close();
      }
    }
    return splits; 
  }
  
  /**
   * Set the number of lines per split
   * @param job the job to modify
   * @param numLines the number of lines per split
   */
  public static void setNumLinesPerSplit(Job job, int numLines) {
    job.getConfiguration().setInt(LINES_PER_MAP, numLines);
  }

  /**
   * Get the number of lines per split
   * @param job the job
   * @return the number of lines per split
   */
  public static int getNumLinesPerSplit(JobContext job) {
    return job.getConfiguration().getInt(LINES_PER_MAP, 1);
  }
</pre><br>
<br>
</div>
&nbsp; 现在，我们对Hadoop的输入&#26684;式和其在MapReduce中如何被使用有了具体的了解了。<br>
<p></p>

</div>



<!-- Baidu Button BEGIN -->
<div id="bdshare" class="bdshare_t bds_tools get-codes-bdshare" style="float: right;">
<a class="bds_qzone"></a>
<a class="bds_tsina"></a>
<a class="bds_tqq"></a>
<a class="bds_renren"></a>
<a class="bds_t163"></a>
<span class="bds_more">更多</span>
<a class="shareCount"></a>
</div>
<!-- Baidu Button END -->


<!--192.168.100.34-->
<div class="article_next_prev">
            <li class="prev_article"><span>上一篇：</span><a href="/posa88/article/details/7880835" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shangyipian'])">SEVERE: org.apache.solr.common.SolrException: undefined field text</a></li>
            <li class="next_article"><span>下一篇：</span><a href="/posa88/article/details/7901304" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_xiayipian'])">[Hadoop源码解读]（二）MapReduce篇之Mapper类</a></li>
</div>

<!-- Baidu Button BEGIN -->
<script type="text/javascript" id="bdshare_js" data="type=tools&amp;uid=1536434" ></script>
<script type="text/javascript" id="bdshell_js"></script>
<script type="text/javascript">
    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)
</script>
<!-- Baidu Button END -->

        <div id="digg" ArticleId="7897963">
            <dl id="btnDigg" class="digg digg_disable">
                <dt onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_ding'])">顶</dt>
                <dd>8</dd>
            </dl>
            <dl id="btnBury" class="digg digg_disable">
                <dt onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_cai'])">踩</dt>
                <dd>0</dd>
            </dl>
        </div>
</div>
    <div id="ad_cen">
        <script type="text/javascript">            BAIDU_CLB_SLOT_ID = "117306";</script>
        <script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
    </div>
    <script type="text/javascript">
        //new Ad(4, 'ad_cen');
    </script>
<div id="comment_title" class="panel_head">
    查看评论<a name="comments"></a></div>
<div id="comment_list">
</div>
<div id="comment_bar">
</div>
<div id="comment_form">
</div>
<div class="announce">
    * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '7897963';
    var commentscount = 8;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
    <div id="ad_bot">
    </div>
    <script type="text/javascript">
    new Ad(5, 'ad_bot');
    </script>
<div id="report_dialog">
</div>
<div id="d-top" style="display: none;">
    <a id="d-top-a" href="#" title="回到顶部" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_huidaodingbu'])">
        <img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function ()
    {
        var d_top = $('#d-top');
        document.onscroll = function ()
        {
            var scrTop = (document.body.scrollTop || document.documentElement.scrollTop);
            if (scrTop > 500)
            {
                d_top.show();
            } else
            {
                d_top.hide();
            }
        }
        $('#d-top-a').click(function ()
        {
            scrollTo(0, 0);
            this.blur();
            return false;
        });
    });
  
</script>
<style type="text/css">
    .tag_list
    {
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #D7CBC1;
        color: #000000;
        font-size: 12px;
        line-height: 20px;
        list-style: none outside none;
        margin: 10px 2% 0 1%;
        padding: 1px;
    }
    .tag_list h5
    {
        background: none repeat scroll 0 0 #E0DBD3;
        color: #47381C;
        font-size: 12px;
        height: 24px;
        line-height: 24px;
        padding: 0 5px;
        margin: 0;
    }
    .tag_list h5 a
    {
        color: #47381C;
    }
    .classify
    {
        margin: 10px 0;
        padding: 4px 12px 8px;
    }
    .classify a
    {
        margin-right: 20px;
        white-space: nowrap;
    }
</style>
<div class="tag_list">
    <h5>
        <a href="http://www.csdn.net/tag/" target="_blank">核心技术类目</a></h5>
    <div class="classify">
<a title="全部主题" href="http://www.csdn.net/tag" target="_blank" onclick="LogClickCount(this,336);">全部主题</a>
<a title="Java" href="http://www.csdn.net/tag/Java" target="_blank" onclick="LogClickCount(this,336);">Java</a>
<a title="VPN" href="http://www.csdn.net/tag/vpn" target="_blank" onclick="LogClickCount(this,336);">VPN</a>
<a title="Android" href="http://www.csdn.net/tag/android" target="_blank" onclick="LogClickCount(this,336);">Android</a>
<a title="iOS" href="http://www.csdn.net/tag/ios" target="_blank" onclick="LogClickCount(this,336);">iOS</a>
<a title="ERP" href="http://www.csdn.net/tag/erp" target="_blank" onclick="LogClickCount(this,336);">ERP</a>
<a title="IE10" href="http://www.csdn.net/tag/ie10" target="_blank" onclick="LogClickCount(this,336);">IE10</a>
<a title="Eclipse" href="http://www.csdn.net/tag/eclipse" target="_blank" onclick="LogClickCount(this,336);">Eclipse</a>
<a title="CRM" href="http://www.csdn.net/tag/crm" target="_blank" onclick="LogClickCount(this,336);">CRM</a>
<a title="JavaScript" href="http://www.csdn.net/tag/javascript" target="_blank" onclick="LogClickCount(this,336);">JavaScript</a>
<a title="Ubuntu" href="http://www.csdn.net/tag/ubuntu" target="_blank" onclick="LogClickCount(this,336);">Ubuntu</a>
<a title="NFC" href="http://www.csdn.net/tag/nfc" target="_blank" onclick="LogClickCount(this,336);">NFC</a>
<a title="WAP" href="http://www.csdn.net/tag/wap" target="_blank" onclick="LogClickCount(this,336);">WAP</a>
<a title="jQuery" href="http://www.csdn.net/tag/jquery" target="_blank" onclick="LogClickCount(this,336);">jQuery</a>
<a title="数据库" href="http://www.csdn.net/tag/数据库" target="_blank" onclick="LogClickCount(this,336);">数据库</a>
<a title="BI" href="http://www.csdn.net/tag/bi" target="_blank" onclick="LogClickCount(this,336);">BI</a>
<a title="HTML5" href="http://www.csdn.net/tag/html5" target="_blank" onclick="LogClickCount(this,336);">HTML5</a>
<a title="Spring" href="http://www.csdn.net/tag/spring" target="_blank" onclick="LogClickCount(this,336);">Spring</a>
<a title="Apache" href="http://www.csdn.net/tag/apache" target="_blank" onclick="LogClickCount(this,336);">Apache</a>
<a title="Hadoop" href="http://www.csdn.net/tag/hadoop" target="_blank" onclick="LogClickCount(this,336);">Hadoop</a>
<a title=".NET" href="http://www.csdn.net/tag/.net" target="_blank" onclick="LogClickCount(this,336);">.NET</a>
<a title="API" href="http://www.csdn.net/tag/api" target="_blank" onclick="LogClickCount(this,336);">API</a>
<a title="HTML" href="http://www.csdn.net/tag/html" target="_blank" onclick="LogClickCount(this,336);">HTML</a>
<a title="SDK" href="http://www.csdn.net/tag/sdk" target="_blank" onclick="LogClickCount(this,336);">SDK</a>
<a title="IIS" href="http://www.csdn.net/tag/iis" target="_blank" onclick="LogClickCount(this,336);">IIS</a>
<a title="Fedora" href="http://www.csdn.net/tag/fedora" target="_blank" onclick="LogClickCount(this,336);">Fedora</a>
<a title="XML" href="http://www.csdn.net/tag/xml" target="_blank" onclick="LogClickCount(this,336);">XML</a>
<a title="LBS" href="http://www.csdn.net/tag/lbs" target="_blank" onclick="LogClickCount(this,336);">LBS</a>
<a title="Unity" href="http://www.csdn.net/tag/unity" target="_blank" onclick="LogClickCount(this,336);">Unity</a>
<a title="Splashtop" href="http://www.csdn.net/tag/splashtop" target="_blank" onclick="LogClickCount(this,336);">Splashtop</a>
<a title="UML" href="http://www.csdn.net/tag/uml" target="_blank" onclick="LogClickCount(this,336);">UML</a>
<a title="components" href="http://www.csdn.net/tag/components" target="_blank" onclick="LogClickCount(this,336);">components</a>
<a title="Windows Mobile" href="http://www.csdn.net/tag/windowsmobile" target="_blank" onclick="LogClickCount(this,336);">Windows Mobile</a>
<a title="Rails" href="http://www.csdn.net/tag/rails" target="_blank" onclick="LogClickCount(this,336);">Rails</a>
<a title="QEMU" href="http://www.csdn.net/tag/qemu" target="_blank" onclick="LogClickCount(this,336);">QEMU</a>
<a title="KDE" href="http://www.csdn.net/tag/kde" target="_blank" onclick="LogClickCount(this,336);">KDE</a>
<a title="Cassandra" href="http://www.csdn.net/tag/cassandra" target="_blank" onclick="LogClickCount(this,336);">Cassandra</a>
<a title="CloudStack" href="http://www.csdn.net/tag/cloudstack" target="_blank" onclick="LogClickCount(this,336);">CloudStack</a>
<a title="FTC" href="http://www.csdn.net/tag/ftc" target="_blank" onclick="LogClickCount(this,336);">FTC</a>
<a title="coremail" href="http://www.csdn.net/tag/coremail" target="_blank" onclick="LogClickCount(this,336);">coremail</a>
<a title="OPhone " href="http://www.csdn.net/tag/ophone " target="_blank" onclick="LogClickCount(this,336);">OPhone </a>
<a title="CouchBase" href="http://www.csdn.net/tag/couchbase" target="_blank" onclick="LogClickCount(this,336);">CouchBase</a>
<a title="云计算" href="http://www.csdn.net/tag/云计算" target="_blank" onclick="LogClickCount(this,336);">云计算</a>
<a title="iOS6" href="http://www.csdn.net/tag/iOS6" target="_blank" onclick="LogClickCount(this,336);">iOS6</a>
<a title="Rackspace " href="http://www.csdn.net/tag/rackspace " target="_blank" onclick="LogClickCount(this,336);">Rackspace </a>
<a title="Web App" href="http://www.csdn.net/tag/webapp" target="_blank" onclick="LogClickCount(this,336);">Web App</a>
<a title="SpringSide" href="http://www.csdn.net/tag/springside" target="_blank" onclick="LogClickCount(this,336);">SpringSide</a>
<a title="Maemo" href="http://www.csdn.net/tag/maemo" target="_blank" onclick="LogClickCount(this,336);">Maemo</a>
<a title="Compuware" href="http://www.csdn.net/tag/compuware" target="_blank" onclick="LogClickCount(this,336);">Compuware</a>
<a title="大数据" href="http://www.csdn.net/tag/大数据" target="_blank" onclick="LogClickCount(this,336);">大数据</a>
<a title="aptech" href="http://www.csdn.net/tag/aptech" target="_blank" onclick="LogClickCount(this,336);">aptech</a>
<a title="Perl" href="http://www.csdn.net/tag/perl" target="_blank" onclick="LogClickCount(this,336);">Perl</a>
<a title="Tornado" href="http://www.csdn.net/tag/tornado" target="_blank" onclick="LogClickCount(this,336);">Tornado</a>
<a title="Ruby" href="http://www.csdn.net/tag/ruby" target="_blank" onclick="LogClickCount(this,336);">Ruby</a>
<a title="Hibernate" href="http://www.csdn.net/hibernate" target="_blank" onclick="LogClickCount(this,336);">Hibernate</a>
<a title="ThinkPHP" href="http://www.csdn.net/tag/thinkphp" target="_blank" onclick="LogClickCount(this,336);">ThinkPHP</a>
<a title="Spark" href="http://www.csdn.net/tag/spark" target="_blank" onclick="LogClickCount(this,336);">Spark</a>
<a title="HBase" href="http://www.csdn.net/tag/hbase" target="_blank" onclick="LogClickCount(this,336);">HBase</a>
<a title="Pure" href="http://www.csdn.net/tag/pure" target="_blank" onclick="LogClickCount(this,336);">Pure</a>
<a title="Solr" href="http://www.csdn.net/tag/solr" target="_blank" onclick="LogClickCount(this,336);">Solr</a>
<a title="Angular" href="http://www.csdn.net/tag/angular" target="_blank" onclick="LogClickCount(this,336);">Angular</a>
<a title="Cloud Foundry" href="http://www.csdn.net/tag/cloudfoundry" target="_blank" onclick="LogClickCount(this,336);">Cloud Foundry</a>
<a title="Redis" href="http://www.csdn.net/tag/redis" target="_blank" onclick="LogClickCount(this,336);">Redis</a>
<a title="Scala" href="http://www.csdn.net/tag/scala" target="_blank" onclick="LogClickCount(this,336);">Scala</a>
<a title="Django" href="http://www.csdn.net/tag/django" target="_blank" onclick="LogClickCount(this,336);">Django</a>
<a title="Bootstrap" href="http://www.csdn.net/tag/bootstrap" target="_blank" onclick="LogClickCount(this,336);">Bootstrap</a>
    </div>
</div>

                    <div class="clear">
                    </div>
                </div>
            </div>
            <div id="side">
    <div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/posa88" target="_blank">
    <img src="http://avatar.csdn.net/A/8/D/1_posa88.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/posa88" class="user_name" target="_blank">posa88</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_guanzhu'])"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_sixin'])"></a>
</div>
<div id="blog_medal">
</div>
<ul id="blog_rank">
    <li>访问：<span>36704次</span></li>
    <li>积分：<span>619分</span></li>
    <li>排名：<span>千里之外</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>23篇</span></li>
    <li>转载：<span>0篇</span></li>
    <li>译文：<span>0篇</span></li>
    <li>评论：<span>23条</span></li>
</ul>
</ul>
</div>


<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">
<li>
<a href="http://blog.csdn.net/posa88/article/category/1191720">Hadoop BASIC</a><span>(11)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1216173">Nutch</a><span>(1)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1220695">Hadoop源码解读</a><span>(6)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1327001">Maven</a><span>(1)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1333263">mapreduce</a><span>(3)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1399899">其它工具</a><span>(0)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1399903">thrift</a><span>(1)</span>
</li>
<li>
<a href="http://blog.csdn.net/posa88/article/category/1400055">mahout</a><span>(1)</span>
</li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/posa88/article/month/2013/08">2013年08月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2013/07">2013年07月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2013/04">2013年04月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2013/01">2013年01月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2012/10">2012年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2012/09">2012年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2012/08">2012年08月</a><span>(12)</span></li><li><a href="http://blog.csdn.net/posa88/article/month/2012/07">2012年07月</a><span>(1)</span></li>
</div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/posa88/article/details/7901304" title="[Hadoop源码解读]（二）MapReduce篇之Mapper类">[Hadoop源码解读]（二）MapReduce篇之Mapper类</a><span>(7163)</span>
</li>
<li>
<a href="/posa88/article/details/7897963" title="[Hadoop源码解读]（一）MapReduce篇之InputFormat">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a><span>(4181)</span>
</li>
<li>
<a href="/posa88/article/details/7906426" title="[Hadoop源码解读]（五）MapReduce篇之Writable相关类">[Hadoop源码解读]（五）MapReduce篇之Writable相关类</a><span>(2976)</span>
</li>
<li>
<a href="/posa88/article/details/8505022" title="Could not resolve archetype org.apache.maven.archetypes:maven-archetype-quickstart">Could not resolve archetype org.apache.maven.archetypes:maven-archetype-quickstart</a><span>(2711)</span>
</li>
<li>
<a href="/posa88/article/details/7956767" title="[Hadoop源码解读]（六）MapReduce篇之MapTask类">[Hadoop源码解读]（六）MapReduce篇之MapTask类</a><span>(1956)</span>
</li>
<li>
<a href="/posa88/article/details/7904720" title="[Hadoop源码解读]（四）MapReduce篇之Counter相关类">[Hadoop源码解读]（四）MapReduce篇之Counter相关类</a><span>(1919)</span>
</li>
<li>
<a href="/posa88/article/details/7870627" title="java.io.IOException: File /home/hadoop/mapred/system/jobtracker.info could only be replicated to 0 n">java.io.IOException: File /home/hadoop/mapred/system/jobtracker.info could only be replicated to 0 n</a><span>(1899)</span>
</li>
<li>
<a href="/posa88/article/details/7870869" title="[Hadoop]使用DistributedCache进行复制联结">[Hadoop]使用DistributedCache进行复制联结</a><span>(1594)</span>
</li>
<li>
<a href="/posa88/article/details/7902709" title="[Hadoop源码解读]（三）MapReduce篇之Job类">[Hadoop源码解读]（三）MapReduce篇之Job类</a><span>(1545)</span>
</li>
<li>
<a href="/posa88/article/details/7880835" title="SEVERE: org.apache.solr.common.SolrException: undefined field text">SEVERE: org.apache.solr.common.SolrException: undefined field text</a><span>(1527)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/posa88/article/details/7897963" title="[Hadoop源码解读]（一）MapReduce篇之InputFormat">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a><span>(8)</span>
</li>
<li>
<a href="/posa88/article/details/7870807" title="使用hadoop的datajoin包进行关系型join操作">使用hadoop的datajoin包进行关系型join操作</a><span>(5)</span>
</li>
<li>
<a href="/posa88/article/details/7901304" title="[Hadoop源码解读]（二）MapReduce篇之Mapper类">[Hadoop源码解读]（二）MapReduce篇之Mapper类</a><span>(4)</span>
</li>
<li>
<a href="/posa88/article/details/7853759" title="关系型MapReduce模式：选择、分组和组内排序">关系型MapReduce模式：选择、分组和组内排序</a><span>(2)</span>
</li>
<li>
<a href="/posa88/article/details/8505022" title="Could not resolve archetype org.apache.maven.archetypes:maven-archetype-quickstart">Could not resolve archetype org.apache.maven.archetypes:maven-archetype-quickstart</a><span>(2)</span>
</li>
<li>
<a href="/posa88/article/details/8130774" title="MapReduce程序的测试--MRUnit">MapReduce程序的测试--MRUnit</a><span>(1)</span>
</li>
<li>
<a href="/posa88/article/details/7906426" title="[Hadoop源码解读]（五）MapReduce篇之Writable相关类">[Hadoop源码解读]（五）MapReduce篇之Writable相关类</a><span>(1)</span>
</li>
<li>
<a href="/posa88/article/details/8516612" title="mapreduce编程(一）：输入文件的过滤">mapreduce编程(一）：输入文件的过滤</a><span>(0)</span>
</li>
<li>
<a href="/posa88/article/details/8534230" title="Pangool:行走在mapreduce之上">Pangool:行走在mapreduce之上</a><span>(0)</span>
</li>
<li>
<a href="/posa88/article/details/8556992" title="mapreduce作业调优tips">mapreduce作业调优tips</a><span>(0)</span>
</li>
</ul>
</div>
<div id="homepageArticles" class="panel tracking-ad" data-mod="popu_4">
<ul class="panel_head"><span>推荐文章</span></ul>
<ul class="panel_body" id="ad_commend"></ul>
</div>
<script type="text/javascript">
 new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/posa88/article/details/7897963#comments">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a>
    <p style="margin:0px;"><a href="/wangqiaoshi" class="user_name">wangqiaoshi</a>:
你好，我想测试KeyValueTextInputFormat是怎么个读取方式，我该怎么测试，hado...
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7870807#comments">使用hadoop的datajoin包进行关系型join操作</a>
    <p style="margin:0px;"><a href="/bo_hai" class="user_name">bo_hai</a>:
运行的参数怎么样传递呢？
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7897963#comments">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a>
    <p style="margin:0px;"><a href="/JimmyLincole" class="user_name">JimmyLincole</a>:
感觉像是看天书，看了好多遍了，难道是我学习的方法不对？？该如何学习源码的分析呢？
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7897963#comments">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a>
    <p style="margin:0px;"><a href="/lihm0_1" class="user_name">lihm0_1</a>:
@zhouleilei:每个InputFormat都会包装不同的RecordReader，单独分析L...
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/8505022#comments">Could not resolve archetype org.apache.maven.archetypes:maven-archetype-quickstart</a>
    <p style="margin:0px;"><a href="/kutekute" class="user_name">kutekute</a>:
@zhj651430918:因为，mvn是maven的命令，你没有在path中配置maven的路径
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/8130774#comments">MapReduce程序的测试--MRUnit</a>
    <p style="margin:0px;"><a href="/mal39" class="user_name">mal39</a>:
Turtorial 确实写错了
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7870807#comments">使用hadoop的datajoin包进行关系型join操作</a>
    <p style="margin:0px;"><a href="/crazyzhb2012" class="user_name">crazyzhb2012</a>:
哦，我发现我的项目中没有自动导入hadoop-0.20.2-datajoin.jar这个包，导入后就...
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7870807#comments">使用hadoop的datajoin包进行关系型join操作</a>
    <p style="margin:0px;"><a href="/crazyzhb2012" class="user_name">crazyzhb2012</a>:
你好，我的程序导入import org.apache.hadoop.contrib.utils.jo...
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7897963#comments">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a>
    <p style="margin:0px;"><a href="/zhouleilei" class="user_name">zhouleilei</a>:
分析的不详细，比如在LineRecordReader类的解读上，一笔带过，没有解释大体流程，我能看懂...
    </p>
    </li>
    <li>
    <a href="/posa88/article/details/7897963#comments">[Hadoop源码解读]（一）MapReduce篇之InputFormat</a>
    <p style="margin:0px;"><a href="/sggys" class="user_name">sggys</a>:
分析的详细啊，学习。
    </p>
    </li>
</ul>
</div>
    </div>
    <div class="clear">
    </div>
</div>

            <div class="clear">
            </div>
        </div>
        

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=664827"></script>
<script type="text/javascript">
    document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date() / 120000).toString(36) + '="></' + 'script>');
</script>
    <script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js"></script>
<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>
<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>
<script type="text/javascript">
    $(function () {
        function __get_code_toolbar(snippet_id) {
            return $("<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "' target='_blank' title='在CODE上查看代码片' style='text-indent:0;'><img src='https://code.csdn.net/assets/CODE_ico.png' width=12 height=12 alt='在CODE上查看代码片' style='position:relative;top:1px;left:2px;'/></a>"
                    + "<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "/fork' target='_blank' title='派生到我的代码片'  style='text-indent:0;'><img src='https://code.csdn.net/assets/ico_fork.svg' width=12 height=12 alt='派生到我的代码片' style='position:relative;top:2px;left:2px;'/></a>");
        }
        
        $("[code_snippet_id]").each(function () {
            __s_id = $(this).attr("code_snippet_id");
            if (__s_id != null && __s_id != "" && __s_id != 0 && parseInt(__s_id) > 70020) {
                __code_tool = __get_code_toolbar(__s_id);
                $(this).prev().find(".tools").append(__code_tool);
            }
        });
    });
</script>

    </div>
      <!--new top-->
    
    <script id="csdn-toolbar-id" btnId="header_notice_num" wrapId="note1" count="5" subCount="5" type="text/javascript" src="http://static.csdn.net/public/common/toolbar/js/toolbar.js"></script>     <!--new top-->
</body>
</html>
