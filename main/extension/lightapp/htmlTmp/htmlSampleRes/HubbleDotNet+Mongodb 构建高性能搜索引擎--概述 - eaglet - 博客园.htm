<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>HubbleDotNet+Mongodb 构建高性能搜索引擎--概述 - eaglet - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=gdNkSiQMyBMkpTeO1ex9qW-60UbMszQItnCUpBAT3LQ1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/KJC/style.css?id=20140110"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/26415.css?v=WO8LdelTQ1DIgYJL2mWCzu3%2bV3c%3d"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/eaglet/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/eaglet/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/eaglet/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'eaglet', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=sYnK9SBBbtgipozKG6pi4Es_tynJ696hgo4AYlC6aiA1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<div style="width:728px; height:100px;">
<div class="lqm_ad" lqm_publisher="lqm.eaglet.site" lqm_zone="ron" lqm_format="728x90"></div>
</div>
<!--PageBeginHtml Block End-->

<table class="Framework" cellspacing="0" cellpadding="0" width="100%">
	<tr>
		<td colspan="3">
			
<div id="top">
<table cellpadding="10" cellspacing="0">
	<tr>
		<td nowrap>
			<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/eaglet/">eaglet</a></h1>
			本博专注于基于微软技术的搜索相关技术
		</td>
	</tr>
</table>
</div>
<div id="sub">
	<div id="sub-right">
<div class="BlogStats">posts - 188, comments - 3594, trackbacks - 26, articles - 0</div></div>
	
&nbsp;
<a id="Header1_MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</a>&nbsp;::
<a id="Header1_MyLinks1_MyHomeLink" href="http://www.cnblogs.com/eaglet/">首页</a>&nbsp;::
<a id="Header1_MyLinks1_NewPostLink" rel="nofollow" href="http://www.cnblogs.com/eaglet/admin/EditPosts.aspx?opt=1">新随笔</a>&nbsp;::
<a id="Header1_MyLinks1_ContactLink" accesskey="9" rel="nofollow" href="http://space.cnblogs.com/msg/send/eaglet">联系</a>&nbsp;::
<a id="Header1_MyLinks1_Syndication" href="http://www.cnblogs.com/eaglet/rss">订阅</a>
<a id="Header1_MyLinks1_XMLLink" class="XMLLink" href="http://www.cnblogs.com/eaglet/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>&nbsp;::
<a id="Header1_MyLinks1_Admin" rel="nofollow" href="http://www.cnblogs.com/eaglet/admin/EditPosts.aspx">管理</a>

</div>
		</td>
	</tr>
	<tr>
		<td class="LeftCell">
			<div id="leftmenu">
            	
		            <div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
		            
<div id=cell>
<img src="/Skins/KJC/Images/icon-group.jpg" hspace=5 align=left vspace=2><h3>公告</h3>
<div id=news>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>
</div>

	            
	            <div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
		</td>
		<td class="MainCell">
			<div id="main">
				

	<div class="post">
		<div class="posthead">
			<h2>
				<a id="cb_post_title_url" class="singleposttitle" href="http://www.cnblogs.com/eaglet/archive/2012/05/10/2494073.html">HubbleDotNet+Mongodb 构建高性能搜索引擎--概述</a>
			</h2>
 			Posted on <span id="post-date">2012-05-10 12:01</span> <a href='http://www.cnblogs.com/eaglet/'>eaglet</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://www.cnblogs.com/eaglet/admin/EditPosts.aspx?postid=2494073" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2494073);return false;">收藏</a>
			<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=26415,cb_entryId=2494073,cb_blogApp=currentBlogApp,cb_blogUserGuid='50733d0b-63cf-dd11-9e4d-001cf0cd104b',cb_entryCreatedDate='2012/5/10 12:01:00';loadViewCount(cb_entryId);</script>
			
		</div>
		<div class="postbody"><div id="cnblogs_post_body"><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HubbleDotNet 从 1.2.3 版本以后开始在官方代码中支持和 Mongodb 对接，Mongodb 是10gen 公司开发的 no-sql 数据库，其读写性能比传统关系数据库要快很多，而且可以非常方便的分布式部署。HubbleDotNet 通过支持 Mongodb 也使其本身同时具备了 no-sql 的解决方案。本文将重点概述Hubble+Mongodb 的功能以及和hubble+sql , lucene.net 的一些性能测试对比。</p> <h1>Mongodb 的安装</h1> <blockquote></blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在开始本文之前，我们简单介绍一下 Mongodb 在 windows 下的安装，其他操作系统下的安装也是类似的。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先在这个链接 <a title="http://www.mongodb.org/downloads" href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a> 找到对应操作系统的版本，下载下来后解压。我们假设解压到 C:\mongodb </p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们在 c:\mongodb 下建立一个 data 目录和 一个 log 目录。下面是目录结构：</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://images.cnblogs.com/cnblogs_com/eaglet/201205/20120510120057883.png"><img style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline;background-image: none;" title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/eaglet/201205/201205101200591208.png" border="0" height="248" width="369" /></a></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 然后我们在run 中运行 cmd ，然后执行 cd c:\mongodb\bin 进入mongodb可执行程序目录</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接下来执行 mongod --dbpath ../data --logpath ../log/mongodb.log</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完成上述步骤后，mongodb 的服务程序就启动了。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p> <h2> 默认端口</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果要远程访问 mongodb ，我们需要在防火墙中将 mongodb 的默认端口打开，下面是 mongodb 相关服务的默认端口：</p> <ul><li>Standalone <tt>mongod</tt> : 27017</li><li><tt>mongos</tt> : 27017</li><li><a href="http://www.mongodb.org/display/DOCS/Architecture+and+Components">shard server</a> (<tt>mongod --shardsvr</tt>) : 27018</li><li>config server (<tt>mongod --configsvr</tt>) : 27019</li><li><a href="http://www.mongodb.org/display/DOCS/Http+Interface">web stats page</a> for <tt>mongod</tt> : add 1000 to port number (28017, by default) </li></ul> <h2></h2> <h2>安装为服务</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上面说的命令行只是用于调试用的，如果要正式在服务器上部署，我们需要将 mongodb 安装为服务来运行。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在windows 下安装mongodb服务的命令行如下:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C:\mongodb\bin&gt;mongod --dbpath c:\mongodb\data --logpath c:\mongodb\log\mongodb.log --logappend &#8211;install</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里我们需要注意下面两点：</p> <ol><li><font color="#ff0000">命令行中的路径必须是绝对路径，如果输入相对路径，需要修改服务的启动路径，否则服务无法运行。</font></li><li><font color="#ff0000">如果是在 windows 7 或者 windows 2008 server 操作系统下安装，必须以 administrator 方式运行 cmd 才行。</font></li></ol> <h2>卸载服务</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果我们不想要mongodb 了，我们可以通过如下命令行卸载服务：</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C:\mongodb\bin&gt;mongod --remove</p> <p>&nbsp;</p> <h1>Hubble中mongodb 数据库适配器的连接字符串</h1> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在HubbleDotNet 中，没有采用 mongodb 默认的连接字符串来连接mongodb，而是用了标准的连接字符串来连接</p> <h2>无用户名和密码连接 mongodb </h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个是mongodb没有设置用户名和密码时通过 hubbledotnet 连接mongodb 数据库适配器的连接字符串</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data Source=127.0.0.1;Initial Catalog=News;Integrated Security=True</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们只要指定服务器IP地址 Data Soruce 和 数据库名 Initial Catalog 就可以了</p> <h2> 通过用户名和密码连接 mongodb </h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个是mongodb设置用户名和密码时通过 hubbledotnet 连接mongodb 数据库适配器的连接字符串</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data Source=127.0.0.1;Initial Catalog=News;User Id=myUsername;Password=myPassword;</p> <p>&nbsp;</p> <h1>HubbleDotNet+Mongodb 功能一览</h1> <ul><li>支持标准的数据类型如 int, string, double,datetime 等</li><li>支持对mongodb的指定字符串字段进行全文索引和查询。mongodb 本身不支持全文查询，hubbledotnet 通过配置后可以支持对mongodb进行全文查询，查询语法和与其他数据库类型的语法相同。这个是hubble+mongodb 的核心功能。</li><li>支持主库为关系数据库，比如 sql server ，镜像表用 mongodb。这个是推荐方式，可以做到数据的读写分离和分布式部署。 </li><li>支持 mongodb 作为主库的主动模式索引，这种模式对于实时索引将会比较有用</li><li>支持 mongodb 作为主库的被动模式索引。这种模式目前还不支持通过hubble来同步索引，需要自己写代码手工同步。原因是mongodb 不支持触发器。</li><li>支持通过 mongodb 实现数据的分布式部署</li><li>支持用SQL语句对mongodb进行非全文查询。如 select top 10 * from table where price &gt; 100 and price &lt; 200 order by price。这个是 hubbleDotNet 特有的功能。hubbledotnet 实现了一个sql 到 bson 的语法转换，调用者可以像访问sql server 那样来通过标准sql语句访问 mongodb ，这为不喜欢 bson 查询的开发者提供了很大的便利。</li><li>支持通过bson 语句访问或配置 mongodb。 hubbledotnet 提供了两个存储过程 sp_excutesql 和 sp_querysql 来方便用户通过hubble直接用 bson 操作mongodb</li><li>对不完整文档的支持。Mongodb 是文档型数据库，它并不强制每条记录的字段像关系数据库那样是固定不变的，可能每条记录的字段都不一样。HubbleDotNet 支持这种设计，对于在记录中没有出现的字段，作为NULL来处理，如果指定了默认值，则按默认值处理。</li><li>对 sub-field 的支持。mongodb 是文档型数据，支持子字段。hubble 将在后续版本中对子字段进行支持。</li></ul> <h1>性能测试</h1> <h2>测试环境：</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 软件版本</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HubbleDotNet 版本 1.2.5.0</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mongodb 版本 2.0.5</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL SERVER 2008</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lucene.net 2.9.4</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 系统环境</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Intel i5 2430M 2.40GHz 8GB windows 7 64bit</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7800 转机械硬盘 </p> <h2>测试数据 </h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 测试数据为2000万行互联网网页数据。数据文件大小为4GB。</p> <h2>测试目标：</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 测试hubble+sqlserver, Hubble+Mongodb 以及 lucene.net 在单机系统高并发时的性能比较。 </p> <h2>测试方法： </h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过测试代码每秒钟查询10次，查询840个常用英文单词的搜索，返回前10条 title 和 content ，按匹配度排序</p> <h2>测试用例1：</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这个测试用例中，我们取消 hubbledotnet 所有的缓存，让 hubbledotnet 每次都从硬盘读索引，lucene.net 也设置为从文件读取。对840个英文单词的查询全部是首次查询。而且每次测试前重启计算机以清除操作系统的文件缓存。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 测试结果如下：</p> <table style="color: #000000;" border="0" cellpadding="0" cellspacing="0"> <tbody> <tr> <td valign="bottom" width="160">&nbsp;</td> <td valign="bottom" width="72"> <p>每秒钟查询次数</p></td> <td valign="bottom" width="87"> <p>最大查询时间(ms)</p></td> <td valign="bottom" width="64"> <p>平均查询时间(ms)</p></td> <td valign="bottom" width="67"> <p>最小查询时间(ms)</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Hubble+Mongodb</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>1573</p></td> <td valign="bottom" width="64"> <p>431</p></td> <td valign="bottom" width="67"> <p>3</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Hubble+SQL SERVER</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>8997</p></td> <td valign="bottom" width="64"> <p>931</p></td> <td valign="bottom" width="67"> <p>4</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Lucene.net</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>209196</p></td> <td valign="bottom" width="64"> <p>108665</p></td> <td valign="bottom" width="67"> <p>9430</p></td></tr></tbody></table> <p>&nbsp;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/eaglet/201205/201205101201013518.png"><img style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline;background-image: none;" title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/eaglet/201205/201205101201033287.png" border="0" height="296" width="490" /></a></p> <p>&nbsp;</p> <p>从这个测试看冷启动情况下， hubbledotnet+mongodb 的性能是最佳的，而lucene.net 几乎比 hubbledotnet+mongodb 慢200多倍。lucene.net 比 hubbledotnet 慢这么多的原因主要是lucene.net 访问IO 的速度较慢，以及lucene.net 的索引大小比hubbledotnet 大4倍多。lucene.net 的索引大小是 3.6GB 而 hubbledotnet 只有 800MB 。HubbleDotNet 1.2.5.0 对于首次查询的磁盘IO做了一定的优化，也是 hubbledotnet 比 lucene.net 性能高这么的主要原因。</p> <h2>测试用例2：</h2> <p>在这个测试用例中，我们在 hubbledotnet 中指定RamIndex 为Full，即将索引全部加载到内存，lucene.net 也设置为内存索引。这个测试主要是测试内存索引的性能。</p> <p>测试结果如下：</p> <table style="color: #000000;" border="0" cellpadding="0" cellspacing="0"> <tbody> <tr> <td valign="bottom" width="160">&nbsp;</td> <td valign="bottom" width="72"> <p>每秒钟查询次数</p></td> <td valign="bottom" width="87"> <p>最大查询时间(ms)</p></td> <td valign="bottom" width="64"> <p>平均查询时间(ms)</p></td> <td valign="bottom" width="67"> <p>最小查询时间(ms)</p></td> <td valign="bottom" width="64"> <p>内存(MB)</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Hubble+Mongodb</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>148</p></td> <td valign="bottom" width="64"> <p>5.53</p></td> <td valign="bottom" width="67"> <p>1</p></td> <td valign="bottom" width="64"> <p>1,164</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Hubble+SQL SERVER</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>157</p></td> <td valign="bottom" width="64"> <p>6.17</p></td> <td valign="bottom" width="67"> <p>0</p></td> <td valign="bottom" width="64"> <p>1,170</p></td></tr> <tr> <td valign="bottom" width="160"> <p>Lucene.net</p></td> <td valign="bottom" width="72"> <p>10</p></td> <td valign="bottom" width="87"> <p>230</p></td> <td valign="bottom" width="64"> <p>3.58</p></td> <td valign="bottom" width="67"> <p>0</p></td> <td valign="bottom" width="64"> <p>3,611</p></td></tr></tbody></table> <p><a href="http://images.cnblogs.com/cnblogs_com/eaglet/201205/201205101201051137.png"><img style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline;background-image: none;" title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/eaglet/201205/201205101201072334.png" border="0" height="306" width="507" /></a></p>  <p>&nbsp;</p> <p>从这个测试结果看，平均查询时间上 lucene.net 要比 hubbledotnet 略快，最大查询时间上 hubbledotnet 比 lucene.net 快。平均查询时间 lucene.net 快的原因，我分析是这样的，lucene.net 是单进程运行，而 hubbledotnet 是3个进程互动，即测试进程，hubble 服务进程 和 mongodb 进程（或 sql server 进程) 。三个进程互动时，每次查询都会触发进程的切换，这个过程会消耗一定的系统资源，特别是在查询时间为微妙级时，这个性能的损耗就会比较突出一些。不过这个查询速度无论对于那种环境来说都已经足够，从这个测试来看，如果要达到系统的满负荷，hubbledotnet 大概可以支持到每秒钟200次查询左右，相当于每天查询1600万次，这个对于单机系统性能已经非常高了，如果一个网站的访问量达到这么大，一半是需要考虑分布式解决方案了。</p> <p>而最大查询时间hubble比lucene快将近1倍，这个基本反映出查询算法性能的优劣。这个和我的另外的测试结果(另文阐述)基本是吻合的，即按照score 排序，hubble 的查询速度大概是 lucene.net 的2倍，按其它字段排序，大概为5倍左右。</p> <p>内存占用方法，Lucene.net 占用3.6GB内存，hubbledotnet占用 1.1 GB 内存，这个主要是因为 hubbledotnet 的索引比 lucene.net 要小的缘故。HubbleDotNet 的内存占用还可以优化，优化后对于本例来说应该可以减少到800MB 左右。</p> <p>持久化方面，hubbledotnet的内存索引是可以自动持久化的，就是说运行过程中的增删改的变化会自动存储到文件介质中，并更新到内存中，这样即使机器重启也不会丢失数据。lucene.net 的内存索引方案是无法自动持久化的，需要另外写程序持久化。</p> <p>&nbsp;</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HubbleDotNet 首页： <a href="http://hubbledotnet.codeplex.com/">http://hubbledotnet.codeplex.com/</a></p><a href="http://www.cnblogs.com/eaglet/archive/2010/04/07/1706305.html">HubbleDotNet开源全文搜索数据库项目--技术详解</a> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HubbleDotNet 微博： <a href="http://weibo.com/hubbledotnet">http://weibo.com/hubbledotnet</a></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>

</div>
	</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<script type="text/javascript">
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
fixPostBodyFormat();
loadAdUnderPost();
</script>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
loadBlogSignature();
LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
</script>
<script type="text/javascript">
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
</script>
</div>

			</div>
		</td>
	</tr>
	<tr>
		<td colspan="2" class="FooterCell">
			
<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>
	<br />
	Copyright &copy; eaglet
</p>

		</td>
	</tr>
</table>

<!--PageEndHtml Block Begin-->
<script type='text/javascript'>//<![CDATA[
    if (typeof jQuery == 'undefined') {
        document.write(unescape("%3Cscript src='http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.4.2.min.js' type='text/javascript' %3E%3C/script%3E"));
    }//]]></script>
<script type='text/javascript' language='Javascript' src='http://s1.lqcdn.com/m.min.js?dt=2.3.110104.1'></script>
<script type='text/javascript' language='Javascript'> if(jQuery.LqmAds)jQuery.LqmAds();</script>
<!--PageEndHtml Block End-->
</body>
</html>
